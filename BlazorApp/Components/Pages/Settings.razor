@page "/settings"
@using BlazorApp.Models.Scale
@using BlazorApp.Services
@using Helpers
@inject ApiService ApiService

<PageTitle>Settings</PageTitle>
<h3>Settings</h3>

@if (isLoading || !isConnected)
{
    <FluentMessageBar Title="Connection Status" Intent="@MessageIntentHelper.GetMessageBarIntent(isLoading)">
        @if (isLoading)
        {
            <span>Sprawdzanie połączenia z API...</span>
        }
        else if (!isConnected)
        {
            <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
        }
    </FluentMessageBar>
}

@code {
    private IQueryable<ScaleDto>? scales;
    private bool isLoading = true;
    private bool isConnected = false;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                scales = await DataLoadingHelper.LoadDataAsync<ScaleDto>(ApiService.GetAllAsync);
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
