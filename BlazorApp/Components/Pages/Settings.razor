@page "/settings"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService

<h3>Settings</h3>


    <FluentButton BackgroundColor="#3CB371" Color="#FFFFFF">Create</FluentButton>


@if (isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Id="scaleReadingsGrid" Items="@scales" GridTemplateColumns="0.1fr 0.1fr 0.1fr 0.2fr 0.1fr" TGridItem="ScaleDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Single item weight" Property="@(c => c!.SingleItemWeight)" />
        <PropertyColumn Title="Is Connected?" Property="@(c => c!.IsConnected)" />
   
        <TemplateColumn Title="Actions">
            @if (context != null)
            {
                <FluentButton BackgroundColor="#1E90FF" Color="#FFFFFF">Edit</FluentButton>
                <FluentButton BackgroundColor="#DC143C" Color="#FFFFFF">Delete</FluentButton>
            }
        </TemplateColumn>


    </FluentDataGrid>

}

@code {
    private IQueryable<ScaleDto>? scales;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = false;
        scales = (await ApiService.GetScalesWithAnyReadings()).AsQueryable();
    }
   
}