@page "/settings"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@using Microsoft.FluentUI.AspNetCore.Components
@inject IMessageService MessageService
@inject IConfiguration Configuration
@inject IDialogService DialogService
@inject NavigationManager navigationManager

<h1>Settings</h1>

@if (isLoading || !isConnected)
{
    <FluentMessageBar Title="Connection Status" Intent="@GetMessageBarIntent()">
        @if (isLoading)
        {
            <span>Sprawdzanie połączenia z API...</span>
        }
        else if (!isConnected)
        {
            <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
        }
    </FluentMessageBar>
}

@if (isConnected)
{
    <FluentButton BackgroundColor="#3CB371" Color="#FFFFFF">Create</FluentButton>

    @if (scales != null)
    {
        <FluentDataGrid Id="scaleReadingsGrid" Items="@scales" GridTemplateColumns="0.1fr 0.1fr 0.1fr 0.2fr 0.1fr" TGridItem="ScaleDto" ShowHover="true" agination="@pagination">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Single item weight" Property="@(c => c!.SingleItemWeight)" />
        <PropertyColumn Title="Is Connected?" Property="@(c => c!.IsConnected)" />

        <TemplateColumn Title="Actions">
            
                <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => DeleteScale(context))" />
                               
        </TemplateColumn>
       

    </FluentDataGrid>

        <FluentPaginator State="@pagination" />
    }
}

@code {
    private IQueryable<ScaleDto>? scales;
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private bool isLoading = true;
    private bool isConnected = false;
    private bool showSuccessMessage = false;
    private string? currentScaleName;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = false;
        scales = (await ApiService.GetAllAsync()).AsQueryable();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                await LoadDataAsync();
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private MessageIntent GetMessageBarIntent()
    {
        return isLoading ? MessageIntent.Info : MessageIntent.Error;
    }

    private async Task DeleteScale(ScaleDto item)
    {
        // Check if the item is null
        if (item is null)
        {
            return;
        }

        // Create and show a dialog to confirm the delete
        IDialogReference dialog = await DialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete the scale '{item.ScaleName}'?",
            "Yes",
            "No",
            "Delete Scale?");
        DialogResult result = await dialog.Result;

        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        // Delete the item
        try
        {
            await ApiService.DeleteScaleById(item.ScaleId);
            await LoadDataAsync();
        }
        catch (Exception exc)
        {
            string errorMessage = exc.InnerException?.Message ?? exc.Message;
            await DialogService.ShowErrorAsync("Error", errorMessage);
        }
    }


}