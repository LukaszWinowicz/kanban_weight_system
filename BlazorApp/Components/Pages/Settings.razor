@page "/settings"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components
@inject IMessageService MessageService
@inject IConfiguration Configuration

<h1>Settings</h1>

@if (showSuccessMessage)
{
    <FluentMessageBar Intent="@MessageIntent.Success">
        Data read successfully for @currentScaleName!
    </FluentMessageBar>
}

<FluentMessageBar Title="Connection Status" Intent="@GetMessageBarIntent()">
    @if (isLoading)
    {
        <span>Sprawdzanie połączenia z API...</span>
    }
    else if (!isConnected)
    {
        <span>Połączono z API.</span>
    }
    else
    {
        <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
    }
</FluentMessageBar>

@if (isConnected)
{
    <FluentButton BackgroundColor="#3CB371" Color="#FFFFFF">Create</FluentButton>

    <FluentDataGrid Id="scaleReadingsGrid" Items="@scales" GridTemplateColumns="0.1fr 0.1fr 0.1fr 0.2fr 0.1fr" TGridItem="ScaleDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Single item weight" Property="@(c => c!.SingleItemWeight)" />
        <PropertyColumn Title="Is Connected?" Property="@(c => c!.IsConnected)" />
   
        <TemplateColumn Title="Actions">
            @if (context != null)
            {
                <FluentButton BackgroundColor="#1E90FF" Color="#FFFFFF">Edit</FluentButton>
                <FluentButton BackgroundColor="#DC143C" Color="#FFFFFF">Delete</FluentButton>
            }
        </TemplateColumn>


    </FluentDataGrid>

}

@code {
    private IQueryable<ScaleDto>? scales;
    private bool isLoading = true;
    private bool isConnected = false;
    private bool showSuccessMessage = false;
    private string? currentScaleName;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = false;
        scales = (await ApiService.GetAllAsync()).AsQueryable();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                await LoadDataAsync();
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private MessageIntent GetMessageBarIntent()
    {
        if (isLoading)
            return MessageIntent.Info;
        else if (isConnected)
            return MessageIntent.Success;
        else
            return MessageIntent.Error;
    }
   
}