@page "/settings"
@using BlazorApp.Components.Pages.Panels
@using BlazorApp.Models.Scale
@using BlazorApp.Services
@using Helpers
@inject ApiService ApiService
@inject IDialogService DialogService

<PageTitle>Settings</PageTitle>
<h3>Settings</h3>

@if (isLoading || !isConnected)
{
    <FluentMessageBar Title="Connection Status" Intent="@MessageIntentHelper.GetMessageBarIntent(isLoading)">
        @if (isLoading)
        {
            <span>Sprawdzanie połączenia z API...</span>
        }
        else if (!isConnected)
        {
            <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
        }
    </FluentMessageBar>
}

@if (isConnected)
{
    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddInDialog())">Add</FluentButton>
    @if (scales != null)
    {
        <FluentDataGrid Id="scaleReadingsGrid" Items="@scales" GridTemplateColumns="0.1fr 0.1fr 0.1fr 0.2fr 0.1fr" TGridItem="ScaleDto" ShowHover="true" agination="@pagination">
            <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
            <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
            <PropertyColumn Title="Single item weight" Property="@(c => c!.SingleItemWeight)" />
            <PropertyColumn Title="Is Connected?" Property="@(c => c!.IsConnected)" />

            <TemplateColumn Title="Actions">
                @* <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => DeleteScale(context))" /> *@

            </TemplateColumn>


        </FluentDataGrid>

        <FluentPaginator State="@pagination" />
    }
}

@code {
    private IQueryable<ScaleDto>? scales;
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private bool isLoading = true;
    private bool isConnected = false;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                scales = await DataLoadingHelper.LoadDataAsync<ScaleDto>(ApiService.GetAllAsync);
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddInDialog()
    {
        ScaleCreateDto newScale = new();

        var parameters = new DialogParameters
        {
            Title = "Add Scale",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true
        };

        // show dialog
        var dialog = await DialogService.ShowDialogAsync<EditScalePanel>(newScale, parameters);
        var dialogResult = await dialog.Result;
        await HandleAddDialogResult(dialogResult);

    }

    private async Task HandleAddDialogResult(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }

        if (result.Data is not null)
        {
            var newItem = result.Data as ScaleCreateDto;
            if (newItem is null)
            {
                return;
            }
            await ApiService.CreateScaleAsync(newItem);
            scales = await DataLoadingHelper.LoadDataAsync<ScaleDto>(ApiService.GetAllAsync);
        }
    }
}
