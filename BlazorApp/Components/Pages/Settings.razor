@page "/settings"
@using BlazorApp.Components.Pages.Panels
@using BlazorApp.Models.Scale
@using BlazorApp.Services
@using Helpers
@inject ApiService ApiService
@inject IDialogService DialogService

<PageTitle>Settings</PageTitle>
<h3>Settings</h3>

@if (isLoading || !isConnected)
{
    <FluentMessageBar Title="Connection Status" Intent="@MessageIntentHelper.GetMessageBarIntent(isLoading)">
        @if (isLoading)
        {
            <span>Sprawdzanie połączenia z API...</span>
        }
        else if (!isConnected)
        {
            <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
        }
    </FluentMessageBar>
}

@if (isConnected)
{
    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" OnClick="@(() => AddInDialog())">Add</FluentButton>
    @if (scales != null)
    {
        <FluentDataGrid Id="scaleReadingsGrid" Items="@scales" TGridItem="ScaleDto" ShowHover="true" agination="@pagination">
            <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)"/>
            <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
            <PropertyColumn Title="Single item weight" Property="@(c => c!.SingleItemWeight)" />

            <TemplateColumn Title="Actions">
                <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => DeleteScale(context))" />

            </TemplateColumn>


        </FluentDataGrid>

        <FluentPaginator State="@pagination" />
    }
}

@code {
    private IQueryable<ScaleDto>? scales;
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private bool isLoading = true;
    private bool isConnected = false;
    bool? canceled;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                scales = await DataLoadingHelper.LoadDataAsync<ScaleDto>(ApiService.GetAllAsync);
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddInDialog()
    {
        ScaleCreateDto newScale = new();

        var parameters = new DialogParameters
        {
            Title = "Add Scale",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true
        };

        // show dialog
        var dialog = await DialogService.ShowDialogAsync<EditScalePanel>(newScale, parameters);
        var dialogResult = await dialog.Result;
        await HandleAddDialogResult(dialogResult);

    }

    private async Task HandleAddDialogResult(DialogResult result)
    {
        if (result.Cancelled)
        {
            return;
        }

        if (result.Data is not null)
        {
            var newItem = result.Data as ScaleCreateDto;
            if (newItem is null)
            {
                return;
            }

            bool uploadResult = await ApiService.CreateScaleAsync(newItem);

            if (uploadResult)
            {
                var dialog =await DialogService.ShowSuccessAsync($"Utworzono nową wagę {newItem.ScaleName}.");
                var response = await dialog.Result;
                canceled = response.Cancelled;
            }
            else
            {
                var dialog = await DialogService.ShowErrorAsync($"Waga o nazwie {newItem.ScaleName}, jest już w systemie.");
                var response = await dialog.Result;
                canceled = response.Cancelled;
            }

            scales = await DataLoadingHelper.LoadDataAsync<ScaleDto>(ApiService.GetAllAsync);
        }
    
    }
    
    private async Task DeleteScale(ScaleDto item)
    {
        // Check if the item is null
        if (item is null)
        {
            return;
        }

        // Create and show a dialog to confirm the delete
        IDialogReference dialog = await DialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete the scale '{item.ScaleName}'?",
            "Yes",
            "No",
            "Delete Scale?");
        DialogResult result = await dialog.Result;

        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        // Delete the item
        try
        {
            await ApiService.DeleteScaleByName(item.ScaleName);
            scales = await DataLoadingHelper.LoadDataAsync<ScaleDto>(ApiService.GetAllAsync);
        }
        catch (Exception exc)
        {
            string errorMessage = exc.InnerException?.Message ?? exc.Message;
            await DialogService.ShowErrorAsync("Error", errorMessage);

        }
    }
}
