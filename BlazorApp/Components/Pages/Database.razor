@page "/database"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer

<PageTitle>Database</PageTitle>
<h3>Select a Reading</h3>

@if (showSuccessMessage)
{
    <FluentMessageBar Intent="@MessageIntent.Success">
        Data read successfully for @currentScaleName!
    </FluentMessageBar>
}

<FluentMessageBar Title="Connection Status" Intent="@GetMessageBarIntent()">
    @if (isLoading)
    {
        <span>Sprawdzanie połączenia z API...</span>
    }
    else if (isConnected)
    {
        <span>Połączono z API.</span>
    }
    else
    {
        <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
    }
</FluentMessageBar>

@if (isConnected && scales != null)
{
    <FluentCombobox Placeholder="Select a scale..." Items="@scales.Select(r => r.ScaleName)" @bind-Value="@selectedScale" Height="200px" @onchange="OnScaleSelected" />
}

@if (readings != null)
{
    <h3>Readings for @selectedScale</h3>
    <FluentDataGrid Items="@readings" ResizableColumns="true">
        <PropertyColumn Property="@(r => r.ItemName)" Title="Item Name" />
        <PropertyColumn Property="@(r => r.Quantity)" Title="Quantity" />
        <PropertyColumn Property="@(r => r.LatestReading)" Title="Date" />
    </FluentDataGrid>
}

@code {
    private IQueryable<ScaleDto>? scales;
    private IQueryable<ScaleReadingDto>? readings;
    private string? selectedScale;
    private bool isLoading = true;
    private bool isConnected = false;
    private bool showSuccessMessage = false;
    private string? currentScaleName;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
        
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                scales = (await ApiService.GetScalesWithAnyReadings()).AsQueryable();
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task OnScaleSelected(ChangeEventArgs e)
    {
        if (e.Value is string scaleName)
        {
            var scale = scales.FirstOrDefault(s => s.ScaleName == scaleName);
            if (scale != null)
            {
                readings = (await ApiService.GetAllReadingsByScaleId(scale.ScaleId)).AsQueryable();
            }
        }
    }

    private MessageIntent GetMessageBarIntent()
    {
        if (isLoading)
            return MessageIntent.Info;
        else if (isConnected)
            return MessageIntent.Success;
        else
            return MessageIntent.Error;
    }
}