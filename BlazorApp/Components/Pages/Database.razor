@page "/database"
@using BlazorApp.Models.Scale
@using BlazorApp.Services
@using Helpers

@inject ApiService ApiService
@rendermode InteractiveServer

<PageTitle>Database</PageTitle>
<h3>Select a Reading</h3>

@if (isLoading || !isConnected)
{
    <FluentMessageBar Title="Connection Status" Intent="@MessageIntentHelper.GetMessageBarIntent(isLoading)">
        @if (isLoading)
        {
            <span>Sprawdzanie połączenia z API...</span>
        }
        else if (!isConnected)
        {
            <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
        }
    </FluentMessageBar>
}

@if (isConnected && scales != null)
{
    <FluentCombobox Placeholder="Select a scale..." Items="@scales.Select(r => r.ScaleName)" @bind-Value="@selectedScale" Height="200px" @onchange="OnScaleSelected" />
}

@if (readings != null)
{
    <h3>Readings for @selectedScale</h3>
    <FluentDataGrid Items="@readings" ResizableColumns="true" Pagination="@pagination">
        <PropertyColumn Title="Item Name" Property="@(r => r.ItemName)" Align="Align.Start" />
        <PropertyColumn Title="Single Item Weight" Property="@(r => r.SingleItemWeight)" Align="Align.Start" />
        <PropertyColumn Title="Total Weight" Property="@(r => r.Value)" Align="Align.Start" />
        <PropertyColumn Title="Qty in the box" Property="@(r => r.Quantity)" Align="Align.Start" />
        <PropertyColumn Property="@(r => r.ReadingDate)" Title="Date" Sortable="true" />
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />
}

@code {
    private IQueryable<ScaleDto>? scales;
    private IQueryable<ScaleReadingDto>? readings;
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private string? selectedScale;
    private bool isLoading = true;
    private bool isConnected = false;
    private bool showSuccessMessage = false;
    private string? currentScaleName;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
        
    }

    private async Task OnScaleSelected(ChangeEventArgs e)
    {
        if (e.Value is string scaleName)
        {
            var scale = scales.FirstOrDefault(s => s.ScaleName == scaleName);
            if (scale != null)
            {
                readings = (await ApiService.GetAllReadingsByScaleNameAsync(scale.ScaleName)).AsQueryable();
            }
        }
    }

    private async Task LoadDataAsync()
    {
        var result = await ApiService.GetAllAsync();
        scales = result.AsQueryable();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
               // scales = (await ApiService.GetAllAsync()).AsQueryable();
                await LoadDataAsync();
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
