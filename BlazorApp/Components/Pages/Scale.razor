@page "/scale"
@using BlazorApp.Models.Scale
@using BlazorApp.Services
@using Microsoft.FluentUI.AspNetCore.Components
@using Helpers
@inject ApiService ApiService
@inject IDialogService DialogService
@inject IMessageService MessageService
@inject IConfiguration Configuration
@rendermode InteractiveServer

<PageTitle>Scales</PageTitle>
<h3>Scales</h3>

@if (isLoading || !isConnected)
{
    <FluentMessageBar Title="Connection Status" Intent="@MessageIntentHelper.GetMessageBarIntent(isLoading)">
        @if (isLoading)
        {
            <span>Sprawdzanie połączenia z API...</span>
        }
        else if (!isConnected)
        {
            <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
        }
    </FluentMessageBar>
}

@if (isConnected && scalesWithLatestReadings != null)
{
    <FluentDataGrid Id="scaleReadingsGrid" Items="@scalesWithLatestReadings"  TGridItem="ScaleReadingDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" Align="Align.Start" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" Align="Align.Start" />
        <PropertyColumn Title="Single Item Weight" Property="@(c => c!.SingleItemWeight != null ? c.SingleItemWeight.ToString() : "N/A")" Align="Align.Start" />
        <PropertyColumn Title="Total Weight" Property="@(c => c!.Value != null ? c.Value.ToString() : "N/A")" Align="Align.Start" />
        <PropertyColumn Title="Qty in the box" Property="@(c => c!.Quantity != null ? Math.Floor(c.Quantity.Value).ToString() : "N/A")" Align="Align.Start" />
        <PropertyColumn Title="Latest Reading Date" Property="@(c => c!.ReadingDate != null ? c.ReadingDate.Value.ToString("yyyy-MM-dd HH:mm:ss") : "N/A")" Align="Align.Start" />
        <TemplateColumn Title="New reading">
            <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" @onclick="async () => await ReadNewDataFromScale(context)" />
        </TemplateColumn>
    </FluentDataGrid>
}

@code {
    private IQueryable<ScaleReadingDto>? scalesWithLatestReadings;
    private bool isLoading = true;
    private bool isConnected = false;
    private bool showSuccessMessage = false;
    private string? currentScaleName;
    bool? canceled;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task ReadNewDataFromScale(ScaleReadingDto scale)
    {
        currentScaleName = scale.ScaleName;
        bool result = await ApiService.ReadNewDataFromScale(scale.ScaleName);
        if (!result)
        {
            var dialog = await DialogService.ShowErrorAsync($"Nieudany odczyt, waga nie jest aktualnie podłączona do sieci.");
            var response = await dialog.Result;
            canceled = response.Cancelled;
        }

        scalesWithLatestReadings = await DataLoadingHelper.LoadDataAsync<ScaleReadingDto>(ApiService.GetLatestReadingForEveryScaleAsync);
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                scalesWithLatestReadings = await DataLoadingHelper.LoadDataAsync<ScaleReadingDto>(ApiService.GetLatestReadingForEveryScaleAsync);
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}