@page "/scale"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Scale Readings</PageTitle>

<h1>Scale Readings</h1>
<p>This component demonstrates fetching and displaying data from an API.</p>

@if (isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Id="scaleReadingsGrid" Items="@scalesWithLatestReadings" GridTemplateColumns="1fr 1fr 1fr 2fr 1fr" TGridItem="ScaleDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Weight" Property="@(c => c!.SingleItemWeight.ToString("F2"))" Align="Align.Center" />
        <PropertyColumn Title="Latest Reading Date" Property="@(c => c!.Readings != null ? c.Readings.Date.ToString("yyyy-MM-dd HH:mm:ss") : "N/A")" />
        <PropertyColumn Title="Value" Property="@(c => c!.Readings != null ? c.Readings.Value.ToString("F2") : "N/A")" Align="Align.Center" />

         <!-- Kolumna z ikoną dzwonka -->
    <TemplateColumn Title="Action">
        <TemplateColumnContent>
            @{
                // Użycie FluentIcon do wyświetlenia ikony dzwonka
                <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" />
            }
        </TemplateColumnContent>
    </TemplateColumn>

    </FluentDataGrid>
  
}

@code {

    private IQueryable<ScaleDto>? scalesWithLatestReadings;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = false;

        // tutaj dodać walidację

        var result = await ApiService.GetScalesWithLatestReadingsAsync();
        scalesWithLatestReadings = result.AsQueryable();

    }
}
