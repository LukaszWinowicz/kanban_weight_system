@page "/scale"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components
@inject IMessageService MessageService
@inject IConfiguration Configuration

<PageTitle>Scale Readings</PageTitle>
<h1>Scale Readings</h1>

@if (showSuccessMessage)
{
    <FluentMessageBar Intent="@MessageIntent.Success">
        Data read successfully for @currentScaleName!
    </FluentMessageBar>
}

<FluentMessageBar Title="Connection Status" Intent="@GetMessageBarIntent()">
    @if (isLoading)
    {
        <span>Sprawdzanie połączenia z API...</span>
    }
    else if (isConnected)
    {
        <span>Połączono z API.</span>
    }
    else
    {
        <span>Nie można połączyć się z API. Proszę spróbować później lub skontaktować się z administratorem.</span>
    }
</FluentMessageBar>

@if (isConnected && scalesWithLatestReadings != null)
{
    <FluentDataGrid Id="scaleReadingsGrid" Items="@scalesWithLatestReadings" GridTemplateColumns="0.1fr 0.1fr 0.1fr 0.2fr 0.1fr" TGridItem="ScaleReadingDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Qty in the box" Property="@(c => c!.Quantity != null ? Math.Floor(c.Quantity.Value).ToString() : "N/A")" Align="Align.Center" />
        <PropertyColumn Title="Latest Reading Date" Property="@(c => c!.LatestReading != null ? c.LatestReading.Date.ToString("yyyy-MM-dd HH:mm:ss") : "N/A")" />
        <TemplateColumn Title="Is Connected?">
            <span style="color: @(context.IsConnected ? "green" : "red");">
                @(context.IsConnected ? "Connected" : "Disconnected")
            </span>
        </TemplateColumn>
        <TemplateColumn Title="New reading">
            @if (context.IsConnected)
            {
                <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" @onclick="async () => await ReadNewDataFromScale(context)" />
            }
            else
            {
                <FluentIcon Value="@(new Icons.Regular.Size24.AlertOff())" />
            }
        </TemplateColumn>
    </FluentDataGrid>
}

@code {
    private IQueryable<ScaleReadingDto>? scalesWithLatestReadings;
    private bool isLoading = true;
    private bool isConnected = false;
    private bool showSuccessMessage = false;
    private string? currentScaleName;

    protected override async Task OnInitializedAsync()
    {
        _ = CheckApiConnectionAsync();
    }

    private async Task CheckApiConnectionAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isConnected = await ApiService.CheckApiConnection();

            if (isConnected)
            {
                await LoadDataAsync();
            }
        }
        catch
        {
            isConnected = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadDataAsync()
    {
        var result = await ApiService.GetLatestReadingForEveryScaleAsync();
        scalesWithLatestReadings = result.AsQueryable();
    }

    private async Task ReadNewDataFromScale(ScaleReadingDto scale)
    {
        currentScaleName = scale.ScaleName;
        showSuccessMessage = true;
        await ApiService.ReadNewDataFromScale(scale.ScaleId);
        await LoadDataAsync();
    }

    private MessageIntent GetMessageBarIntent()
    {
        if (isLoading)
            return MessageIntent.Info;
        else if (isConnected)
            return MessageIntent.Success;
        else
            return MessageIntent.Error;
    }
}