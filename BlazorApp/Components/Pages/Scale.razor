@page "/scale"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components

<PageTitle>Scale Readings</PageTitle>

<h1>Scale Readings</h1>
<p>This component demonstrates fetching and displaying data from an API.</p>

<FluentMessageBar @bind-Open="@showMessageBar"
                  Title="Błąd"
                  Message="Wystąpił błąd podczas ładowania strony."
                  Intent="MessageIntent.Error"
                  OnDismiss="@CloseMessageBar" />

@* @if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (scalesWithLatestReadings != null)
{
    <FluentDataGrid Id="scaleReadingsGrid" Items="@scalesWithLatestReadings" GridTemplateColumns="1fr 1fr 1fr 2fr 1fr" TGridItem="ScaleWithLatestReadingDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Weight" Property="@(c => c!.SingleItemWeight.ToString("F2"))" Align="Align.Center" />
        <PropertyColumn Title="Reading Date" Property="@(c => c!.LatestReading != null ? c.LatestReading.Date.ToString("yyyy-MM-dd HH:mm:ss") : "N/A")" />
        <PropertyColumn Title="Latest Reading" Property="@(c => c!.LatestReading != null ? c.LatestReading.Value.ToString("F2") : "N/A")" Align="Align.Center" />
    </FluentDataGrid>

  
} *@

@code {

    private bool showMessageBar = false;

    protected override void OnInitialized()
    {
        showMessageBar = true;
    }

    private void CloseMessageBar()
    {
        showMessageBar = false;
    }


    // private IQueryable<ScaleWithLatestReadingDto>? scalesWithLatestReadings;
    // private string? errorMessage;
    // private bool isLoading = true;
    // bool? canceled;

    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadData();
    // }

    // private async Task LoadData()
    // {
    //     isLoading = true;
    //     errorMessage = null;

    //     try
    //     {
    //         var result = await ApiService.GetScalesWithLatestReadingsAsync();
    //         if (result.IsSuccess)
    //         {
    //             scalesWithLatestReadings = result.Value.AsQueryable();
    //         }
    //         else
    //         {
    //             await ShowErrorAsync("Failed to load data.");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         await ShowErrorAsync("Cannot connect to the database. Please try again later.");
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //     }
    // }

    // private async Task ShowErrorAsync(string message)
    // {
    //     var dialog = await DialogService.ShowErrorAsync(message);
    //     var result = await dialog.Result;
    //     canceled = result.Cancelled;
    // }
}
