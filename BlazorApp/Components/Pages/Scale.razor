@page "/scale"
@using BlazorApp.Models
@using BlazorApp.Services
@inject ApiService ApiService
@rendermode InteractiveServer
@inject IDialogService DialogService
@using Microsoft.FluentUI.AspNetCore.Components
@inject IMessageService MessageService

<PageTitle>Scale Readings</PageTitle>

<h1>Scale Readings</h1>
<p>This component demonstrates fetching and displaying data from an API.</p>

@if (showSuccessMessage)
{
    <FluentMessageBar  Intent="@MessageIntent.Success">
        Data read successfully for @currentScaleName!
    </FluentMessageBar>
}


@if (isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Id="scaleReadingsGrid" Items="@scalesWithLatestReadings" GridTemplateColumns="0.1fr 0.1fr 0.1fr 0.2fr 0.1fr" TGridItem="ScaleReadingDto" ShowHover="true">
        <PropertyColumn Title="Scale Name" Property="@(c => c!.ScaleName)" />
        <PropertyColumn Title="Item Name" Property="@(c => c!.ItemName)" />
        <PropertyColumn Title="Qty in the box" Property="@(c => c!.Quantity != null ? Math.Floor(c.Quantity.Value).ToString() : "N/A")" Align="Align.Center" />
        <PropertyColumn Title="Latest Reading Date" Property="@(c => c!.LatestReading != null ? c.LatestReading.Date.ToString("yyyy-MM-dd HH:mm:ss") : "N/A")" />

        <!-- Kolumna z Is Connected i kolorem tekstu -->
        <TemplateColumn Title="Is Connected?">
                @if (context.IsConnected)
                {
                    <span style="color: green;">Connected</span>
                }
                else
                {
                    <span style="color: red;">Disconnected</span>
                }
        </TemplateColumn>

         <!-- Kolumna z ikoną dzwonka -->
        <TemplateColumn Title="New reading">
         @*    @if (context != null)
            {
                <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" @onclick="async () => await ReadNewDataFromScale(context)" />
            } *@

            @if (context.IsConnected)
            {
                <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" @onclick="async () => await ReadNewDataFromScale(context)" />
            }
            else
            {
                <FluentIcon Value="@(new Icons.Regular.Size24.AlertOff())" />
            }

        </TemplateColumn>

    </FluentDataGrid>

}

@code {

    private IQueryable<ScaleReadingDto>? scalesWithLatestReadings;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = false;

        // tutaj dodać walidację

        var result = await ApiService.GetLatestReadingForEveryScaleAsync();
        scalesWithLatestReadings = result.AsQueryable();
    }

    private bool showSuccessMessage = false;
    private string? currentScaleName;

    private async Task ReadNewDataFromScale(ScaleReadingDto scale)
    {
        currentScaleName = scale.ScaleName;
        showSuccessMessage = true;

        await ApiService.ReadNewDataFromScale(scale.ScaleId);
        await LoadData(); // Odśwież dane po zakończeniu operacji
    }
}
